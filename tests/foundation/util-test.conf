TEST_DESCRIPTION="3d utility tests"

TEST_TEMPLATE="template-3d.scad"

# CAMERA="--camera 0,0,0,0,0,0,7"

TEST_INCLUDES="
include <../../lib/OFL/foundation/util.scad>
include <../../lib/OFL/vitamins/screw.scad>

use <../../lib/OFL/foundation/customizer-engine.scad>"

# TAB_PARAMETERS="
# \$fn            = 50;           // [3:100]
# // When true, disables PREVIEW corrections like FL_NIL
# \$FL_RENDER     = false;
# // Default color for printable items (i.e. artifacts)
# \$fl_filament   = \"DodgerBlue\"; // [DodgerBlue,Blue,OrangeRed,SteelBlue]
# // -2⇒none, -1⇒all, [0..)⇒max depth allowed
# \$FL_TRACES     = -2;     // [-2:10]
# SHOW_LABELS     = false;
# SHOW_SYMBOLS    = false;
# "

# TAB_Verbs=""

TAB_Placement=""

TAB_Direction=""

TAB_TEST="/* [Commons] */

// select the utility to be tested
UTIL        = \"generic rail\"; // [generic rail, screw rail, plane align, cutout]
// thickness of the test plane to be 'railed'
PLANE_T    = 2.5;

/* [Screw select] */

SCREW_NAME  = \"*\";  // [*, M2_cap, M2p5_cap, M3_cap, M4_cap, M5_cap, M6_cap, M8_cap, M3_low_cap, M3_shoulder, M4_shoulder, M2_cs_cap, M3_cs_cap, M4_cs_cap, M5_cs_cap, M6_cs_cap, M8_cs_cap, M2_dome, M2p5_dome, M3_dome, M4_dome, M5_dome, M3_hex, M4_hex, M5_hex, M6_hex, M8_hex, M2p5_pan, M3_pan, M4_pan, M5_pan, M6_pan, No632_pan, No2, No4, No6, No8, No6_cs, M3_grub, M4_grub, M5_grub, M6_grub]
SCREW_LEN   = 10;   // [0:0.1:25]

/* [Rail test] */

ADD       = true;
ASSEMBLY  = false;

// length of the rail
RAIL_LEN  = 10; // [0:100]

/* [Plane align test] */
PLANE_SRC_AXIS_1  = [1,0,0]; // [-1:0.1:1]
PLANE_SRC_AXIS_2  = [0,1,0]; // [-1:0.1:1]

PLANE_DST_AXIS_1  = [1,0,0]; // [-1:0.1:1]
PLANE_DST_AXIS_2  = [0,1,0]; // [-1:0.1:1]

/* [Cutout test] */

// axis to use (detects the cutout plane on O)
CO_AXIS = \"Z\";  // [X,-X,Y,-Y,Z,-Z]
// distance of the new outline from the original outline
CO_DELTA = 0; // [0:0.1:1]
// translation applied BEFORE the projection() useful for trimming when CO_CUT=true
CO_TRIM  = [0,0,0]; // [-5:0.1:5]
// when true only the cutout plane is used for section
CO_CUT    = false;

/* [Context] */

\$fl_clearance = 0.1; // [0:0.1:1]"

TEST_PROLOGUE="$PROLOGUE_DEBUG
fl_status();
"

TEST_CODE="
screw = fl_ScrewInventory(
  name        = fl_cust_undef(SCREW_NAME,_when_=SCREW_NAME==\"*\"),
  longer_than = SCREW_LEN
)[0];

// customizer helper
function axis(s) =
  assert(s==\"X\" || s==\"-X\" || s==\"Y\" || s==\"-Y\" || s==\"Z\" || s==\"-Z\")
  s == \"X\" ? FL_X : s==\"-X\" ? -FL_X : s==\"Y\" ? FL_Y : s==\"-Y\" ? -FL_Y : s==\"Z\" ? FL_Z : -FL_Z;
assert(screw);

module rail_test(mode) {
  cs    = fl_screw_csh(screw);
  hh    = fl_screw_headH(screw);
  size  = let(
    base  = 2*(fl_screw_headR(screw)+PLANE_T)+RAIL_LEN
  ) [base,base,cs ? PLANE_T : PLANE_T+hh];
  if (ADD)
    fl_color()
      render()
        difference() {
          translate(Z(hh))
            fl_cube(size=size,octant=-Z);
          if (mode==\"generic\")
            translate(+Z(NIL))
              fl_rail(RAIL_LEN)
                fl_screw([FL_FOOTPRINT,FL_CUTOUT],screw,\$fl_thickness=hh,\$fl_tolerance=\$fl_clearance);
          else assert(mode==\"screw\")
            fl_screw_rail(RAIL_LEN, screw);
        }
  if (ASSEMBLY)
    translate(+Z(NIL))
      fl_screw(type=screw);
}

module plane_align_test() {
  size  = [4,4,0.1];
  module plane(axis) {
    color(\"red\")   fl_vector(axis.x);
    color(\"green\") fl_vector(axis.y);
    // color(\"blue\")  fl_vector(cross(axis.x,axis.y));
  }

  module shapes() {
    fl_color(\$fl_filament) translate(size/2)
      fl_cylinder(r1=1,r2=0,h=1);
  }

  src  = [fl_versor(PLANE_SRC_AXIS_1),fl_versor(PLANE_SRC_AXIS_2)];
  fl_trace(\"source plane\",src);
  src_R = fl_planeAlign(a=[X,Y],b=[PLANE_SRC_AXIS_1,PLANE_SRC_AXIS_2]);
  translate(-X(2*size.x)) {
    plane(max(size)*src);
    multmatrix(src_R) {
      %fl_cube(size=size,octant=+X+Y-Z);
      shapes();
    }
  }

  dst  = [fl_versor(PLANE_DST_AXIS_1),fl_versor(PLANE_DST_AXIS_2)];
  fl_trace(\"destination plane\",dst);
  dst_R = fl_planeAlign(a=[PLANE_SRC_AXIS_1,PLANE_SRC_AXIS_2],b=[PLANE_DST_AXIS_1,PLANE_DST_AXIS_2]);
  translate(+X(size.x)) {
    plane(max(size)*dst);
    multmatrix(dst_R * src_R) {
      %fl_cube(size=size,octant=+X+Y-Z);
      shapes();
    }
  }
}

module cutout_test() {
  sz_cyl    = [2,3,7];
  sz_plane  = [20,20,PLANE_T];
  distance  = sz_cyl.z*3/2;
  co_axes   = let(axis=axis(CO_AXIS)) [
    axis,
    axis==+Z ? +X : axis==-Z ? -X: axis==+X ? -Z: axis==-X ? +Z: +X
  ];
  co_len    = 1.5 * distance; // cutout length

  module shapes() {
    difference() {
      union() {
        fl_prism(n=5,l1=sz_cyl.x,l2=sz_cyl.y,h=sz_cyl.z,octant=O);
        fl_cylinder(r1=sz_cyl.x/2,r2=sz_cyl.y/2,h=sz_cyl.z);
      }
      fl_cylinder(r=0.5,h=sz_cyl.z*2.5,octant=O);
    }
  }

  module co() {
    fl_cutout(len=co_len,z=co_axes[0],x=co_axes[1],trim=CO_TRIM,cut=CO_CUT,delta=CO_DELTA)
      children();
  }

  module plane() {
    fl_color(\$fl_filament) translate(distance*co_axes[0])
      fl_cube(size=sz_plane,octant=+Z,direction=[co_axes[0],0]);
  }

  shapes();

  difference() {
    plane();
    co() shapes();
  }
  // if ()
    #co() shapes();
}

if (UTIL==\"generic rail\")
  rail_test(\"generic\");
else if (UTIL==\"screw rail\")
  rail_test(\"screw\");
else if (UTIL==\"plane align\")
  plane_align_test();
else if (UTIL==\"cutout\")
  cutout_test();"
