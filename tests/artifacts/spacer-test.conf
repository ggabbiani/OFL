TEST_DESCRIPTION="Spacers test file"

TEST_TEMPLATE="template-3d.scad"

# CAMERA="--camera 0,0,0,0,0,0,7"

TEST_INCLUDES="
include <../../lib/OFL/artifacts/spacer.scad>
include <../../lib/OFL/vitamins/countersinks.scad>
"

# TAB_PARAMETERS="
# \$fn            = 50;           // [3:100]
# // When true, disables PREVIEW corrections like FL_NIL
# \$FL_RENDER     = false;
# // Default color for printable items (i.e. artifacts)
# \$fl_filament   = \"DodgerBlue\"; // [DodgerBlue,Blue,OrangeRed,SteelBlue]
# // -2⇒none, -1⇒all, [0..)⇒max depth allowed
# \$FL_TRACES     = -2;     // [-2:10]
# SHOW_LABELS     = false;
# SHOW_SYMBOLS    = false;
# "

TAB_Verbs="
/* [Supported verbs] */

// adds shapes to scene.
\$FL_ADD       = \"ON\";   // [OFF,ON,ONLY,DEBUG,TRANSPARENT]
// layout of predefined auxiliary shapes (like predefined screws)
\$FL_ASSEMBLY  = \"ON\";  // [OFF,ON,ONLY,DEBUG,TRANSPARENT]
// adds local reference axes
\$FL_AXES      = \"OFF\";  // [OFF,ON,ONLY,DEBUG,TRANSPARENT]
// adds a bounding box containing the object
\$FL_BBOX      = \"OFF\";  // [OFF,ON,ONLY,DEBUG,TRANSPARENT]
// layout of predefined drill shapes (like holes with predefined screw diameter)
\$FL_DRILL     = \"OFF\";  // [OFF,ON,ONLY,DEBUG,TRANSPARENT]
// adds a footprint to scene, usually a simplified FL_ADD
\$FL_FOOTPRINT = \"OFF\";  // [OFF,ON,ONLY,DEBUG,TRANSPARENT]
// layout of user passed accessories (like alternative screws)
\$FL_LAYOUT    = \"OFF\";  // [OFF,ON,ONLY,DEBUG,TRANSPARENT]
// mount shape through predefined screws
\$FL_MOUNT     = \"OFF\";  // [OFF,ON,ONLY,DEBUG,TRANSPARENT]
"

# TAB_Placement="
# /* [3D Placement] */

# X_PLACE = \"undef\";  // [undef,-1,0,+1]
# Y_PLACE = \"undef\";  // [undef,-1,0,+1]
# Z_PLACE = \"undef\";  // [undef,-1,0,+1]
# "

# TAB_Direction="
# /* [Direction] */
# DIR_NATIVE  = true;
# // ARBITRARY direction vector
# DIR_Z       = [0,0,1];  // [-1:0.1:+1]
# // rotation around
# DIR_R       = 0;        // [-360:360]
# "

TAB_TEST="
/* [FACTORY] */

// height
H_MIN     = 9;  // [0:0.1:15]
// minimum external ⌀
D_MIN     = 12;  // [0:0.1:20]
// nominal screw size
SCREW_SIZE  = \"4\";       // [no screw,2,2.5,3,4,5,6,8]
KNUT_TYPE   = \"spiral\";  // [none, linear, spiral]
// no fillet if zero
FILLET  = 1;  // [0:0.1:5]

ANCHOR_X_POS  = false;
ANCHOR_X_NEG  = false;
ANCHOR_Y_POS  = false;
ANCHOR_Y_NEG  = false;
ANCHOR_Z_NEG  = true;

/* [TEST] */

// thickness on +Z axis
THICK_POSITIVE = 1.6;      // [0:0.1:10]
// thickness on -Z axis
THICK_NEGATIVE = 2.5;      // [0:0.1:10]
"



TEST_CODE="
anchor  = [
  if (ANCHOR_X_POS) +X,
  if (ANCHOR_X_NEG) -X,
  if (ANCHOR_Y_POS) +Y,
  if (ANCHOR_Y_NEG) -Y,
  if (ANCHOR_Z_NEG) -Z,
];

verbs = fl_verbList([
  FL_ADD,
  FL_ASSEMBLY,
  FL_AXES,
  FL_BBOX,
  FL_DRILL,
  FL_FOOTPRINT,
  FL_LAYOUT,
  FL_MOUNT,
]);
thickness = let(t= [
  if (THICK_NEGATIVE) -THICK_NEGATIVE,
  if (THICK_POSITIVE) +THICK_POSITIVE
]) t ? t : undef;

scr_inventory = screw_lists[0]; // cap screws from NopSCADlib
scr_size      = SCREW_SIZE!=\"no screw\" ? fl_atof(SCREW_SIZE) : undef;
screw         = scr_size ? fl_ScrewInventory(nominal=scr_size)[0] : undef;
knut          = KNUT_TYPE!=\"none\" ? assert(scr_size,\"***TEST ERROR***: specify a screw size for knut\") fl_knut_shortest(fl_knut_find(thread=KNUT_TYPE,nominal=scr_size)) : undef;
assert(KNUT_TYPE==\"none\"||knut,str(\"***TEST ERROR***: no M\",SCREW_SIZE,\" \",KNUT_TYPE,\" knurl nut found in inventory\"));
cs            = let(d=knut?fl_nominal(knut):screw?fl_nominal(screw):undef)
                d ? fl_cs_select(nominal=d)[0] : undef;

spacer = fl_Spacer(h_min=H_MIN,d_min=D_MIN,screw_size=scr_size,knut=knut);
fl_spacer(verbs,spacer,thick=thickness,anchor=anchor,fillet=FILLET,octant=octant,direction=direction)
  if (\$spc_verb==FL_LAYOUT) {
    /*
     * CHILDREN LAYOUT: by default spacers layout children on the top of the ±Z
     * surfaces.
     */
    translate(\$spc_director*(\$spc_thick))
      if (\$spc_thick)
        let(l=1.5*fl_spc_d(spacer))
          fl_cube(size=[l,l,\$spc_thick],octant=-\$spc_director,\$FL_ADD=\$FL_LAYOUT);
  } else
    assert(\$spc_verb==FL_MOUNT,\$spc_verb)
    let(
      htyp    = fl_screw_headType(screw),
      washer  = (htyp==hs_cs||htyp==hs_cs_cap) ? \"no\" : \"default\"
    ) fl_screw(FL_DRAW,screw,\$fl_thickness=\$spc_thickness,head_washer=washer,\$FL_ADD=\$FL_MOUNT,\$FL_ASSEMBLY=\$FL_MOUNT);"
