# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  NopSCADlibVer: v21.8.0
  NopTarBall: ${{NopSCADlibVer}}.tar.gz
  NopSCADlib: https://github.com/nophead/NopSCADlib/archive/refs/tags/${NopTarBall}
  scad_utils: https://github.com/openscad/scad-utils.git
  LIBS: .local/share/OpenSCAD/libraries

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  ubuntu-test:
    name: Ubuntu tests
    runs-on: ubuntu-latest
    steps:
    - name: Project checkout
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      uses: actions/checkout@v3
      with:
        # Number of commits to fetch. 0 indicates all history for all branches and tags (default 1).
        fetch-depth: '0'

    - name: pre-requisites
      # install Ninja 'cause of the automatic build parallelism tuned with the
      # number of processors found in the hosting system
      run: |
        whoami
        sudo apt update
        sudo apt upgrade -y
        sudo apt install -y openscad python3-venv wget
        mkdir -p ${HOME}/${{env.LIBS}}

    - name: NopSCADlib
      run: |
        working-directory: ${HOME}/${{env.LIBS}}
        wget ${{env.NopSCADlib}}
        tar -xzf ${{env.NopTarBall}}
        ln -s ${{env.NopTarBall}} NopSCADlib

    - name: scad-utils
      run: |
        working-directory: ${HOME}/${{env.LIBS}}
        git clone https://github.com/openscad/scad-utils.git

    - name: make sources and documentation
      run: |
        python -m venv .venv
        source .venv/bin/activate
        pip install --upgrade pip
        pip install -r pyreqs.txt
        make -s

    # - name: Performs tests
    #   working-directory: ${{github.workspace}}/build
    #   # Execute tests defined by the CMake configuration.
    #   # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
    #   run: ctest -C ${{env.BUILD_TYPE}}

    # - name: Create platform dependent binary packages
    #   working-directory: ${{github.workspace}}/build
    #   run: cpack

    # - name: Upload produced artifacts
    #   uses: actions/upload-artifact@v3
    #   id: upload-artifacts
    #   with:
    #     name: ${{env.ARTIFACTS}}
    #     path: ${{github.workspace}}/build/*.deb

  # docker based tests (will be replaced by native-tests)
  docker-tests:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: run tests
        run: docker run -v $GITHUB_WORKSPACE/:/import:Z  -t ggabbiani/openscad:v1.5.0
